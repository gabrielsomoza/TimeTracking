<?php

namespace DoctrineORMModule\Proxy\__CG__\Db\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class User extends \Db\Entity\User implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Db\\Entity\\User' . "\0" . 'password', '' . "\0" . 'Db\\Entity\\User' . "\0" . 'firstName', '' . "\0" . 'Db\\Entity\\User' . "\0" . 'lastName', '' . "\0" . 'Db\\Entity\\User' . "\0" . 'dayLength', '' . "\0" . 'Db\\Entity\\User' . "\0" . 'username', '' . "\0" . 'Db\\Entity\\User' . "\0" . 'accessTokens', '' . "\0" . 'Db\\Entity\\User' . "\0" . 'authorizationCodes', '' . "\0" . 'Db\\Entity\\User' . "\0" . 'refreshTokens', '' . "\0" . 'Db\\Entity\\User' . "\0" . 'worklog');
        }

        return array('__isInitialized__', '' . "\0" . 'Db\\Entity\\User' . "\0" . 'password', '' . "\0" . 'Db\\Entity\\User' . "\0" . 'firstName', '' . "\0" . 'Db\\Entity\\User' . "\0" . 'lastName', '' . "\0" . 'Db\\Entity\\User' . "\0" . 'dayLength', '' . "\0" . 'Db\\Entity\\User' . "\0" . 'username', '' . "\0" . 'Db\\Entity\\User' . "\0" . 'accessTokens', '' . "\0" . 'Db\\Entity\\User' . "\0" . 'authorizationCodes', '' . "\0" . 'Db\\Entity\\User' . "\0" . 'refreshTokens', '' . "\0" . 'Db\\Entity\\User' . "\0" . 'worklog');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (User $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', array($password));

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', array());

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setFirstName($firstName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFirstName', array($firstName));

        return parent::setFirstName($firstName);
    }

    /**
     * {@inheritDoc}
     */
    public function getFirstName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFirstName', array());

        return parent::getFirstName();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastName($lastName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastName', array($lastName));

        return parent::setLastName($lastName);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastName', array());

        return parent::getLastName();
    }

    /**
     * {@inheritDoc}
     */
    public function setDayLength($dayLength)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDayLength', array($dayLength));

        return parent::setDayLength($dayLength);
    }

    /**
     * {@inheritDoc}
     */
    public function getDayLength()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDayLength', array());

        return parent::getDayLength();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsername($username)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsername', array($username));

        return parent::setUsername($username);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsername()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getUsername();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsername', array());

        return parent::getUsername();
    }

    /**
     * {@inheritDoc}
     */
    public function addAccessToken(\Db\Entity\AccessToken $accessTokens)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAccessToken', array($accessTokens));

        return parent::addAccessToken($accessTokens);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAccessToken(\Db\Entity\AccessToken $accessTokens)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAccessToken', array($accessTokens));

        return parent::removeAccessToken($accessTokens);
    }

    /**
     * {@inheritDoc}
     */
    public function getAccessTokens()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAccessTokens', array());

        return parent::getAccessTokens();
    }

    /**
     * {@inheritDoc}
     */
    public function addAuthorizationCode(\Db\Entity\AuthorizationCode $authorizationCodes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAuthorizationCode', array($authorizationCodes));

        return parent::addAuthorizationCode($authorizationCodes);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAuthorizationCode(\Db\Entity\AuthorizationCode $authorizationCodes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAuthorizationCode', array($authorizationCodes));

        return parent::removeAuthorizationCode($authorizationCodes);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthorizationCodes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthorizationCodes', array());

        return parent::getAuthorizationCodes();
    }

    /**
     * {@inheritDoc}
     */
    public function addRefreshToken(\Db\Entity\RefreshToken $refreshTokens)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRefreshToken', array($refreshTokens));

        return parent::addRefreshToken($refreshTokens);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRefreshToken(\Db\Entity\RefreshToken $refreshTokens)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRefreshToken', array($refreshTokens));

        return parent::removeRefreshToken($refreshTokens);
    }

    /**
     * {@inheritDoc}
     */
    public function getRefreshTokens()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRefreshTokens', array());

        return parent::getRefreshTokens();
    }

    /**
     * {@inheritDoc}
     */
    public function addWorklog(\Db\Entity\Worklog $worklog)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addWorklog', array($worklog));

        return parent::addWorklog($worklog);
    }

    /**
     * {@inheritDoc}
     */
    public function removeWorklog(\Db\Entity\Worklog $worklog)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeWorklog', array($worklog));

        return parent::removeWorklog($worklog);
    }

    /**
     * {@inheritDoc}
     */
    public function getWorklog()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWorklog', array());

        return parent::getWorklog();
    }

}
